<?xml version="1.0" encoding="UTF-8"?>
<beans default-init-method="init" default-destroy-method="cleanUp" xmlns="http://www.springframework.org/schema/beans" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
  <!-- Caching -->
  <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />

  <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO" />

  <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
    <property name="cacheManager" ref="ehCacheManager" />
  </bean>

  <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
    <property name="sessionDAO" ref="sessionDAO" />
  </bean>

  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
    <property name="realm" ref="userRealm" />
    <property name="cacheManager" ref="cacheManager" />
    <!-- By default the servlet container sessions will be used. Uncomment this line to use shiro's native sessions (see the JavaDoc for more): -->
    <!-- <property name="sessionMode" value="native"/> -->
  </bean>

  <!-- Define any javax.servlet.Filter beans you want anywhere in this application context. -->
  <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
  <!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly add them -->
  <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details. -->
  <bean id="authc_uf_jm" class="com.jiggy.sample.security.UserFormAuthenticationFilter" />
  <bean id="authz_perm_jm" class="com.jiggy.sample.security.HttpMethodPermissionFilter" />

  <bean id="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    <!-- true means hex encoded, false means base64 encoded -->
    <!-- property name="storedCredentialsHexEncoded" value="false" / -->
    <property name="hashAlgorithmName" value="SHA-256" />
    <!-- property name="hashIterations" value="1024" / -->
  </bean>

  <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
  <!-- security datasource: -->
  <bean id="userRealm" class="com.jiggy.sample.security.UserRealm">
    <property name="credentialsMatcher" ref="hashedCredentialsMatcher" />
    <!-- property name="authenticationTokenClass" ref="UsernamePasswordToken" /-->
  </bean>

  <!-- JDBC Realm Settings -->
  <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
    <property name="name" value="jdbcRealm" />
    <property name="dataSource" ref="dataSource" />
    <property name="authenticationQuery" value="SELECT password FROM system_user_accounts WHERE username=? and status=1" />
    <property name="userRolesQuery" value="SELECT role_name FROM system_roles r, system_user_accounts u, system_user_roles ur WHERE u.user_id=ur.user_id AND r.role_id=ur.role_id AND u.username=?" />
    <property name="permissionsQuery" value="SELECT permission_name FROM system_roles r, system_permissions p, system_role_permission rp WHERE r.role_id=rp.role_id AND p.permission_id=rp.permission_id AND r.role_name=?" />
    <property name="permissionsLookupEnabled" value="true" />
  </bean>

  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <property name="securityManager" ref="securityManager" />
    <!-- override these for application-specific URLs if you like: -->
    <property name="loginUrl" value="/login.html" />
    <property name="successUrl" value="/index.jsp" />
    <property name="unauthorizedUrl" value="/unauthorized.html" />
    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean -->
    <!-- defined will be automatically acquired and available via its beanName in chain -->
    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
    <!-- property name="filters"> <util:map> <entry key="authc" value-ref="authc_jm" /> </util:map> </property -->
    <property name="filterChainDefinitions">
      <value>
        [urls]
        /logout = anon
        /error = anon
        /jquery/** = anon
        /service/** = authc_uf_jm, authz_perm_jm
        /** = authc_uf_jm
      </value>
    </property>
  </bean>

  <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

  <!-- Enable Shiro Annotations for Spring-configured beans. Only run after -->
  <!-- the lifecycleBeanProcessor has run: -->
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />
  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager" />
  </bean>
</beans>